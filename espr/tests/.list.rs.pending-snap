{"run_id":"1637913238-352774600","line":23,"new":{"module_name":"list","snapshot_name":"list","metadata":{"source":"espr/tests/list.rs","expression":"tt"},"snapshot":"pub mod test_schema {\n    use ruststep::{\n        as_holder, derive_more::*, error::Result, primitive::*, tables::*, Holder, TableInit,\n    };\n    use std::collections::HashMap;\n    #[derive(Debug, Clone, PartialEq, Default, TableInit)]\n    pub struct Tables {\n        a: HashMap<u64, as_holder!(A)>,\n        b: HashMap<u64, as_holder!(B)>,\n    }\n    impl Tables {\n        pub fn a_iter<'table>(&'table self) -> impl Iterator<Item = Result<A>> + 'table {\n            self.a\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n        pub fn b_iter<'table>(&'table self) -> impl Iterator<Item = Result<B>> + 'table {\n            self.b\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = a)]\n    #[holder(generate_deserialize)]\n    pub struct A {\n        pub x: Vec<f64>,\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = b)]\n    #[holder(generate_deserialize)]\n    pub struct B {\n        #[holder(use_place_holder)]\n        pub a: Vec<A>,\n    }\n}\n"},"old":{"module_name":"list","metadata":{},"snapshot":"pub mod test_schema {\n    use ruststep::{as_holder, derive_more::*, error::Result, primitive::*, tables::*, Holder, TableInit};\n    use std::collections::HashMap;\n    #[derive(Debug, Clone, PartialEq, Default, TableInit)]\n    pub struct Tables {\n        a: HashMap<u64, as_holder!(A)>,\n        b: HashMap<u64, as_holder!(B)>,\n    }\n    impl Tables {\n        pub fn a_iter<'table>(&'table self) -> impl Iterator<Item = Result<A>> + 'table {\n            self.a\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n        pub fn b_iter<'table>(&'table self) -> impl Iterator<Item = Result<B>> + 'table {\n            self.b\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = a)]\n    #[holder(generate_deserialize)]\n    pub struct A {\n        pub x: Vec<f64>,\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = b)]\n    #[holder(generate_deserialize)]\n    pub struct B {\n        #[holder(use_place_holder)]\n        pub a: Vec<A>,\n    }\n}"}}
{"run_id":"1637913285-456075900","line":23,"new":{"module_name":"list","snapshot_name":"list","metadata":{"source":"espr/tests/list.rs","expression":"tt"},"snapshot":"pub mod test_schema {\n    use ruststep::{\n        as_holder, derive_more::*, error::Result, primitive::*, tables::*, Holder, TableInit,\n    };\n    use std::collections::HashMap;\n    #[derive(Debug, Clone, PartialEq, Default, TableInit)]\n    pub struct Tables {\n        a: HashMap<u64, as_holder!(A)>,\n        b: HashMap<u64, as_holder!(B)>,\n    }\n    impl Tables {\n        pub fn a_iter<'table>(&'table self) -> impl Iterator<Item = Result<A>> + 'table {\n            self.a\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n        pub fn b_iter<'table>(&'table self) -> impl Iterator<Item = Result<B>> + 'table {\n            self.b\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = a)]\n    #[holder(generate_deserialize)]\n    pub struct A {\n        pub x: Vec<f64>,\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = b)]\n    #[holder(generate_deserialize)]\n    pub struct B {\n        #[holder(use_place_holder)]\n        pub a: Vec<A>,\n    }\n}\n"},"old":{"module_name":"list","metadata":{},"snapshot":"pub mod test_schema {\n    use ruststep::{\n        as_holder, derive_more::*, error::Result, primitive::*, tables::*, Holder, TableInit\n    };\n    use std::collections::HashMap;\n    #[derive(Debug, Clone, PartialEq, Default, TableInit)]\n    pub struct Tables {\n        a: HashMap<u64, as_holder!(A)>,\n        b: HashMap<u64, as_holder!(B)>,\n    }\n    impl Tables {\n        pub fn a_iter<'table>(&'table self) -> impl Iterator<Item = Result<A>> + 'table {\n            self.a\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n        pub fn b_iter<'table>(&'table self) -> impl Iterator<Item = Result<B>> + 'table {\n            self.b\n                .values()\n                .cloned()\n                .map(move |value| value.into_owned(&self))\n        }\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = a)]\n    #[holder(generate_deserialize)]\n    pub struct A {\n        pub x: Vec<f64>,\n    }\n    #[derive(Debug, Clone, PartialEq, :: derive_new :: new, Holder)]\n    # [holder (table = Tables)]\n    # [holder (field = b)]\n    #[holder(generate_deserialize)]\n    pub struct B {\n        #[holder(use_place_holder)]\n        pub a: Vec<A>,\n    }\n}"}}
{"run_id":"1637913306-267480200","line":23,"new":null,"old":null}
